https://meet.google.com/wie-bpou-dcf


            Практика
+ 1. Выбрать всех по имени Dima.
+ 2. Выбрать всех в возрасте от 24 до 30.
+ 3. Выбрать всех, у кого оценки не ниже 7 баллов по профессии тестировщик.
+ 4. Объединить две последовательности.
+ 5. Определить, содержит ли последовательность указанный элемент.

            concat.Contains(new Student { Name = "Sergey", Age = 29, IsMarried = true, Profession = Student.Professions.Programmer, Marks = new Byte[] { 11, 11, 11, 11, 11, 8, 11, 11 } });
            Student student = new Student { Name = "Bob", Age = 24, IsMarried = true, Profession = Student.Professions.Engineer, Marks = new Byte[] { 6, 7, 11, 8, 9, 5 } };
            List<Student> contains = concat.ToList();
            contains.Add(student);
            contains.Contains(student);

+ 6. Получить общее количество элементов последовательности.
+ 7. Получить число элементов, удовлетворяющих заданному условию.
+ 8. Убрать из последовательности все повторяющиеся элементы.
+ 9. Вернуть элемент по указанному индексу в последовательности.
+ 10. Вернуть элемент по указанному индексу в последовательности или значение по умолчанию, если индекс вне допустимого диапазона.
+ 11. Получить все элементы первой последовательности, которых нет во второй.
+ 12. Получить первый элемент последовательности, который удовлетворяет указанному условию.
+ 13. Получить первый элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.
+ 14. Получить группу студентов, которые женаты.
+ 15. Получить элементы - общие для двух последовательностей (пересечение множеств, представленных двумя последовательностями).

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Console1
{
    interface ISome
    {
        void M();
    }

    class Student : ISome
    {
        public enum Professions { Doctor, Programmer, Tester, Engineer, Teacher }
        public string Name { get; set; }
        public int Age { get; set; }
        public bool IsMarried { get; set; }
        byte[] marks = new byte[10];
        public Professions Profession { get; set; }
        public byte[] Marks { get { return marks; } set { marks = value; } }

        public decimal GetAverage()
        {
            return (decimal)marks.Average(m => m);
            //double aver = 0;
            //foreach (var v in Marks)
            //    aver += v;
            //return (decimal)aver / Marks.Length;
        }

        public override string ToString()
        {
            return $"Name: {Name}, age: {Age}, profession: {Profession}, isMarried: {IsMarried}, marksAverage: {Math.Round(GetAverage(), 2).ToString()}";
        }

        public void M()
        {
            Console.WriteLine("Hello");
        }
    }

    class StudentComparer : IEqualityComparer<Student>
    {
        public bool Equals(Student x, Student y)
        {
            return x.ToString() == y.ToString();
        }

        public int GetHashCode(Student obj)
        {
            return obj.ToString().GetHashCode();
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            List<Student> students = new List<Student>
            {
                new Student{ Name = "Nastya", Age = 30, IsMarried = true, Profession = Student.Professions.Teacher, Marks = new Byte[]{10,8,7,11,3,8,11,12}},
                 new Student{ Name = "Nastya", Age = 30, IsMarried = true, Profession = Student.Professions.Teacher, Marks = new Byte[]{10,8,7,11,3,8,11,12}},
                  new Student{ Name = "Nastya", Age = 30, IsMarried = true, Profession = Student.Professions.Teacher, Marks = new Byte[]{10,8,7,11,3,8,11,12}},
                new Student {Name = "Ira", Age = 18, IsMarried = false, Profession = Student.Professions.Doctor, Marks = new Byte[]{6,8,7,2,3,8,6,3}},
                new Student { Name = "Dima", Age = 34, IsMarried = true, Profession = Student.Professions.Programmer, Marks = new Byte[]{10,12,12,11,12,12,11,12}},
                 new Student { Name = "Timur", Age = 25, IsMarried = false, Profession = Student.Professions.Tester, Marks = new Byte[]{7,8,7,7,7,8,7,7}},
                  new Student { Name = "Kolya", Age = 23, IsMarried = true, Profession = Student.Professions.Doctor, Marks = new Byte[]{5,5,5,3,3,5,5,5}},
                  new Student { Name = "Oleg", Age = 31, IsMarried = true, Profession = Student.Professions.Tester, Marks = new Byte[]{9,9,9,7,9,8,9,9}},
                  new Student { Name = "Sergey", Age = 29, IsMarried = true, Profession = Student.Professions.Programmer, Marks = new Byte[]{11,11,11,11,11,8,11,11}}
            };

            // Выбрать всех по имени Dima.
            //students.Where(s => s.Name == "Dima");
            //List<Student> list = result.ToList();

            // Выбрать всех в возрасте от 24 до 30.
            //var result = students.Where(s => s.Age >= 24 && s.Age <= 30);

            //Выбрать всех, у кого оценки не ниже 7 баллов по профессии тестировщик.
            //var result = students.
            //    Where(s => s.Profession == Student.Professions.Tester && s.Marks.Min() >= 7).
            //    OrderBy(p=>p.Name).
            //    OrderByDescending(d=>d.Age).
            //    Select(s=>$"{s.Name} {s.Age} {s.Profession}");
            
            //foreach (var item in result)
            //{
            //    Console.WriteLine(item);
            //}

            //Console.WriteLine(students.All(s=>s is ISome));
            //Console.WriteLine(students.Any(s=>s.Age==35));

            //IEnumerable<ISome> somes = students.Cast<ISome>();
            //foreach (var item in somes)
            //{
            //    item.M();
            //}

            //Объединить две последовательности.

            List<Student> students1 = new List<Student>
            {
                new Student{ Name = "Roma", Age = 30, IsMarried = true, Profession = Student.Professions.Teacher, Marks = new Byte[]{10,8,7,11,3,8,11,12}},
                new Student {Name = "Garic", Age = 18, IsMarried = false, Profession = Student.Professions.Doctor, Marks = new Byte[]{6,8,7,2,3,8,6,3}},
                new Student { Name = "Lyosha", Age = 34, IsMarried = true, Profession = Student.Professions.Programmer, Marks = new Byte[]{10,12,12,11,12,12,11,12}},
                 new Student { Name = "Timur", Age = 25, IsMarried = false, Profession = Student.Professions.Tester, Marks = new Byte[]{7,8,7,7,7,8,7,7}},
                  new Student { Name = "Tom", Age = 23, IsMarried = true, Profession = Student.Professions.Doctor, Marks = new Byte[]{5,5,5,3,3,5,5,5}},
                  new Student { Name = "Oleg", Age = 31, IsMarried = true, Profession = Student.Professions.Tester, Marks = new Byte[]{9,9,9,7,9,8,9,9}},
                  new Student { Name = "Sergey", Age = 29, IsMarried = true, Profession = Student.Professions.Programmer, Marks = new Byte[]{11,11,11,11,11,8,11,11}}
            };

            var concat = students.Concat(students1);
            //var union = students.Union(students1);
            //foreach (var item in concat)
            //{
            //    Console.WriteLine(item);
            //}

            // Определить, содержит ли последовательность указанный элемент.
            /*Console.WriteLine(concat.Contains(new Student { Name = "Sergey", Age = 29, IsMarried = true, Profession = Student.Professions.Programmer, Marks = new Byte[] { 11, 11, 11, 11, 11, 8, 11, 11 } }));
            Student student = new Student { Name = "Bob", Age = 24, IsMarried = true, Profession = Student.Professions.Engineer, Marks = new Byte[] { 6, 7, 11, 8, 9, 5 } };
            List<Student> contains = concat.ToList();
            contains.Add(student);
            Console.WriteLine(contains.Contains(student));*/

            //Получить общее количество элементов последовательности.
            //Console.WriteLine(concat.Count());

            //Получить число элементов, удовлетворяющих заданному условию.
            //Console.WriteLine(concat.Count(s=>s.Name== "Nastya"));

            //Убрать из последовательности все повторяющиеся элементы.
            //var distinct = concat.Distinct();
            var distinct = concat.Distinct(new StudentComparer());

            //foreach (var item in distinct)
            //{
            //    Console.WriteLine(item);
            //}

            //Вернуть элемент по указанному индексу в последовательности.
            //Console.WriteLine(distinct.ElementAt(1));

            // Вернуть элемент по указанному индексу в последовательности или значение по умолчанию, если индекс вне допустимого диапазона.
            //Student student23 = distinct.ElementAtOrDefault(23);
            //Console.WriteLine(student23!=null?student23.ToString():"Student null");

            //Получить все элементы первой последовательности, которых нет во второй.

            List<Student> students2 = new List<Student>
            {
                new Student{ Name = "Roma", Age = 30, IsMarried = true, Profession = Student.Professions.Teacher, Marks = new Byte[]{10,8,7,11,3,8,11,12}},
                new Student {Name = "Garic1", Age = 18, IsMarried = false, Profession = Student.Professions.Doctor, Marks = new Byte[]{6,8,7,2,3,8,6,3}},
                new Student { Name = "Lyosha1", Age = 34, IsMarried = true, Profession = Student.Professions.Programmer, Marks = new Byte[]{10,12,12,11,12,12,11,12}},
                 new Student { Name = "Timur1", Age = 25, IsMarried = false, Profession = Student.Professions.Tester, Marks = new Byte[]{7,8,7,7,7,8,7,7}},
                  new Student { Name = "tom1", Age = 23, IsMarried = true, Profession = Student.Professions.Doctor, Marks = new Byte[]{5,5,5,3,3,5,5,5}},
                  new Student { Name = "Oleg1", Age = 31, IsMarried = true, Profession = Student.Professions.Tester, Marks = new Byte[]{9,9,9,7,9,8,9,9}},
                  new Student { Name = "Sergey1", Age = 29, IsMarried = true, Profession = Student.Professions.Programmer, Marks = new Byte[]{11, 11,11,11,11,8,11,11}}
            };
            //var except = distinct.Except(students2);
            //foreach (var item in except)
            //{
            //    Console.WriteLine(item);
            //}

            //Получить первый элемент последовательности, который удовлетворяет указанному условию.
            //try
            //{
            //    Console.WriteLine(distinct.First(s => s.Name == "Qwe"));
            //}
            //catch { }
            //Получить первый элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.
            //Student student = distinct.FirstOrDefault(s => s.Name=="Oleg");
            //if (student!=null)
            //{
            //    Console.WriteLine(student);
            //}
            // Получить группу студентов, которые женаты.
            //IEnumerable<IGrouping<bool, Student>> group = distinct
            //    .GroupBy(s => s.IsMarried);
            //    //.Where(s=>s.Key==true);

            //foreach (IGrouping<bool,Student> item in group)
            //{
            //    Console.WriteLine(item.Key);
            //    foreach (Student value in item)
            //    {
            //        Console.Write($"{value.Name} ");
            //    }
            //    Console.WriteLine();
            //}

            //Получить элементы - общие для двух последовательностей.
            var intersect = concat.Intersect(students1);
            foreach (var item in intersect)
            {
                Console.WriteLine(item);
            }

            Console.ReadLine();
        }
    }
}

+++++++++++++++++++++++++++++++++++++++++++++++++

	Создать Person (FName, LName, Age, Birthday).
	Создать класс PersonNationality (id, Nationality). Добавить в класс Person поле idNationality.
	Создать и заполнить тестовыми значениями на основе класса PersonNationality коллекцию объектов.

	С помощью выражений LINQ получить и распечатать на экране результаты следующих запросов:

a. Фамилии и даты рождения людей, возраст  которых превышает 20 лет. Результат отсортировать по возрасту (по возрастанию), 
а также по дате (по убыванию).

b. С помощью повторного использования оператора from получить список обращений к людям (больше 18 лет) в двух вариантах 
(1.Уважаемый Иван Иванович, 2. Дорогой Иван Иванович )

c. Получить список имен всех людей отсортированный по IdNationality по убыванию.

d. Получить список людей,  с указанной датой рождения. Список должен содержать строки с фамилией, именем и поздравлениями 
с днем рождения.

e. Получить список людей группированных по четным и не четным месяцам рождения. Вывести сначала всех людей первой категории 
(четные) затем второй (не четные).

f. В предыдущий список результата добавить счетчик, который указывает на количество людей принадлежащее первой и второй 
категории.

g. Отсортировать имена людей списка в порядке возрастания, но при этом выполнять сортировку по полному имени, сформированному 
объединением вместе FName и LName.